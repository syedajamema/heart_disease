# -*- coding: utf-8 -*-
"""testhd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ys8d5vD0v_yqPPInC5zfm1gU70FPm9l4
"""


import streamlit as st
import pandas as pd
import numpy as np
import joblib
import sklearn
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

# Load dataset
data_url = "https://archive.ics.uci.edu/ml/machine-learning-databases/heart-disease/processed.cleveland.data"
columns = ["age", "sex", "cp", "trestbps", "chol", "fbs", "restecg", "thalach", "exang", "oldpeak", "slope", "ca", "thal", "target"]
df = pd.read_csv(data_url, names=columns, na_values=["?", "NA"])

# Convert columns to numeric and handle missing values
df["ca"] = pd.to_numeric(df["ca"], errors='coerce')
df["thal"] = pd.to_numeric(df["thal"], errors='coerce')
df.dropna(inplace=True)

# Ensure dataset is not empty
if df.shape[0] == 0:
    raise ValueError("Dataset is empty after preprocessing.")

df['target'] = df['target'].apply(lambda x: 1 if x > 0 else 0)  # Convert to binary classification

# Preprocessing
X = df.drop(columns=['target'])
y = df['target']
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)
joblib.dump((model, scaler), "heart_model.pkl")  # Save model

# Streamlit UI
st.title("Heart Disease Prediction")
st.write("Enter patient details to predict heart disease risk.")

# User input fields
age = st.number_input("Age", min_value=20, max_value=100, value=50)
sex = st.selectbox("Sex", [0, 1], format_func=lambda x: "Male" if x == 1 else "Female")
cp_options = {
    'typical angina': 0,
    'atypical angina': 1,
    'non-anginal': 2,
    'asymptomatic': 3
}
cp_str = st.selectbox("Chest Pain Type (CP)", list(cp_options.keys()))
cp = cp_options[cp_str]
trestbps = st.number_input("Resting Blood Pressure", min_value=80, max_value=200, value=120)
chol = st.number_input("Cholesterol", min_value=100, max_value=600, value=200)
fbs = st.selectbox("Fasting Blood Sugar > 120 mg/dl", ['false', 'true'])
restecg = st.selectbox("Resting ECG", ['normal', 'abnormality', 'lv hypertrophy'])
thalach = st.number_input("Max Heart Rate Achieved", min_value=60, max_value=220, value=150)
exang = st.selectbox("Exercise Induced Angina", ['false', 'true'])
oldpeak = st.number_input("ST Depression", min_value=0.0, max_value=6.2, value=1.0, step=0.1)
slope = st.selectbox("Slope of ST Segment", ['upsloping', 'flat', 'downsloping'])
ca = st.number_input("Number of Major Vessels Colored", min_value=0, max_value=3, value=0, step=1)
thal = st.selectbox("Thalassemia", ['normal', 'fixed defect', 'reversible'])

if st.button("Predict"):
    model, scaler = joblib.load("heart_model.pkl")
    user_data = np.array([[age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]], dtype=float)
    user_data_scaled = scaler.transform(user_data)
    prediction = model.predict(user_data_scaled)[0]
    st.write("### Prediction:", "Heart Disease Detected!" if prediction == 1 else "No Heart Disease")
